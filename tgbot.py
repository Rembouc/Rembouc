import os
import re
import time
from datetime import datetime
from collections import defaultdict
import requests
import telebot
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telebot import types

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')
bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def clean_text(text):
    text = re.sub(r'\(.*?\)', '', text)
    text = re.sub(r'\[.*?]', '', text)
    return text.strip()

def format_animal_name(animal_name):
    return re.sub(r'\s+', '_', animal_name.strip())

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
def get_animal_paragraph_and_image(animal_name):
    formatted_name = format_animal_name(animal_name)
    animal_url = f"https://ru.wikipedia.org/wiki/{formatted_name}"
    animal_paragraphs = []
    animal_image_url = None

    try:
        response = requests.get(animal_url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        animals_inf = soup.find(class_="mw-content-ltr mw-parser-output").find_all("p")
        for paragraph in animals_inf:
            paragraph_text = paragraph.text.replace("\n", "")
            animal_paragraphs.append(paragraph_text)

        image = soup.find(class_="infobox-image")
        if image:
            animal_image_url = "https:" + image.find("img")["src"]

        return {
            "info": animal_paragraphs[:3],
            "image_url": animal_image_url,
            "article_url": animal_url
        }
    except Exception as e:
        return {
            "info": [f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º: {animal_name}. –û—à–∏–±–∫–∞: {str(e)}"],
            "image_url": None,
            "article_url": None
        }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫ –∏ –∫–æ—à–µ–∫
def get_dog_breeds():
    dog_breeds_url = "https://www.purinaone.ru/dog/articles/breeds/samye-populyarnye-porody-sobak-s-fotografiyami-i-nazvaniyami"
    popular_dog_breeds = []
    dog_response = requests.get(dog_breeds_url)
    dog_response.raise_for_status()
    soup = BeautifulSoup(dog_response.text, 'html.parser')
    dog_breeds = soup.find_all("b")

    for dog_breed in dog_breeds:
        breed_name = dog_breed.text.strip()
        breed_name = re.sub(r'^\d+\.\s*', '', breed_name)
        breed_name = breed_name.rstrip('.')
        popular_dog_breeds.append(breed_name)

    popular_dog_breeds.sort()
    return [f"{idx + 1}. {breed}" for idx, breed in enumerate(popular_dog_breeds)]

def get_cat_breeds():
    cat_breeds_url = "https://goodhands.vet/blog/voprosy/samye-populyarnye-porody-koshek-v-rossii/"
    popular_cat_breeds = []
    cat_response = requests.get(cat_breeds_url)
    cat_response.raise_for_status()
    soup = BeautifulSoup(cat_response.text, 'html.parser')
    cat_breeds = soup.find_all("h3")

    for cat_breed in cat_breeds[:8]:
        breed_name = cat_breed.text.strip()
        breed_name = breed_name.rstrip('.')
        popular_cat_breeds.append(breed_name)

    popular_cat_breeds.sort()
    return [f"{idx + 1}. {breed}" for idx, breed in enumerate(popular_cat_breeds)]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π
def get_environmental_text():
    environmental_url = "https://greenmystery.ru/blog/ecologia_problems/"
    environmental_response = requests.get(environmental_url)
    environmental_response.raise_for_status()
    soup = BeautifulSoup(environmental_response.text, 'html.parser')
    environmental_text = soup.find(class_="WYSIWYG").text
    environmental_text = environmental_text.replace("\n", "")
    return environmental_text

def get_event_of_the_day():
    day = datetime.now().day
    events = {
        1: "1 —á–∏—Å–ª–∞ —è–Ω–≤–∞—Ä—è 1959 –≥–æ–¥–∞: –∑–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–≤–∞—è —Å–æ–±–∞–∫–∞ –≤ –∫–æ—Å–º–æ—Å ‚Äî –õ–∞–π–∫–∞.",
        2: "2 —á–∏—Å–ª–∞ —Ñ–µ–≤—Ä–∞–ª—è 1960 –≥–æ–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –¥–ª—è —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –≥–µ–ø–∞—Ä–¥–∞.",
        3: "3 —á–∏—Å–ª–∞ –º–∞—Ä—Ç–∞ 1971 –≥–æ–¥–∞: –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞—â–∏—Ç—ã –∫–µ–Ω–≥—É—Ä—É.",
        4: "4 —á–∏—Å–ª–∞ –∞–ø—Ä–µ–ª—è 2001 –≥–æ–¥–∞: –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –õ–æ–Ω–¥–æ–Ω–∞ —Ä–æ–¥–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –±–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å.",
        5: "5 —á–∏—Å–ª–∞ –º–∞—è 1985 –≥–æ–¥–∞: –≤ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ö—Ä–∞–Ω–µ –º–æ—Ä—Å–∫–∏—Ö –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏—Ö.",
        6: "6 —á–∏—Å–ª–∞ –∏—é–Ω—è 1995 –≥–æ–¥–∞: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≤–∏–¥ —á–µ—Ä–µ–ø–∞—Ö –≤ –ë—Ä–∞–∑–∏–ª–∏–∏.",
        7: "7 —á–∏—Å–ª–∞ –∏—é–ª—è 2003 –≥–æ–¥–∞: –ø—Ä–æ—à–ª–∞ –ø–µ—Ä–≤–∞—è –≤—ã—Å—Ç–∞–≤–∫–∞ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –†–æ—Å—Å–∏–∏.",
        8: "8 —á–∏—Å–ª–∞ –∞–≤–≥—É—Å—Ç–∞ 2012 –≥–æ–¥–∞: –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏ —Ä–æ–¥–∏–ª—Å—è —Ä–µ–¥–∫–∏–π –≤–∏–¥ –ø–æ–ø—É–≥–∞—è.",
        9: "9 —á–∏—Å–ª–∞ —Å–µ–Ω—Ç—è–±—Ä—è 2015 –≥–æ–¥–∞: –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫ –¥–ª—è –¥–∏–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ê—Ñ—Ä–∏–∫–µ.",
        10: "10 —á–∏—Å–ª–∞ –æ–∫—Ç—è–±—Ä—è 2008 –≥–æ–¥–∞: –≤ –ö–∏—Ç–∞–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –≤–∏–¥ —è—â–µ—Ä–∏—Ü.",
        11: "11 —á–∏—Å–ª–∞ –Ω–æ—è–±—Ä—è 2014 –≥–æ–¥–∞: –≤ –ò–Ω–¥–∏–∏ –ø—Ä–æ—à–ª–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç–∏–≥—Ä–æ–≤.",
        12: "12 —á–∏—Å–ª–∞ –¥–µ–∫–∞–±—Ä—è 1999 –≥–æ–¥–∞: –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫.",
        13: "13 —á–∏—Å–ª–∞ —è–Ω–≤–∞—Ä—è 2000 –≥–æ–¥–∞: –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –°–∏–¥–Ω–µ—è —Ä–æ–¥–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –±–µ–ª—ã–π —Ç–∏–≥—Ä.",
        14: "14 —á–∏—Å–ª–∞ —Ñ–µ–≤—Ä–∞–ª—è 2011 –≥–æ–¥–∞: –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –≤ –º–∏—Ä–µ —Ñ–µ—Ä–º–∞ –¥–ª—è –¥–∏–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.",
        15: "15 —á–∏—Å–ª–∞ –º–∞—Ä—Ç–∞ 2007 –≥–æ–¥–∞: –±—ã–ª –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –≤–∏–¥ —Ä—ã–± –≤ –ò–Ω–¥–∏–π—Å–∫–æ–º –æ–∫–µ–∞–Ω–µ.",
        16: "16 —á–∏—Å–ª–∞ –∞–ø—Ä–µ–ª—è 1992 –≥–æ–¥–∞: –≤ –º–∏—Ä–µ —Å—Ç–∞–ª–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ –Ω–æ–≤–æ–π –ø–æ—Ä–æ–¥–µ –ª–æ—à–∞–¥–µ–π.",
        17: "17 —á–∏—Å–ª–∞ –º–∞—è 2005 –≥–æ–¥–∞: –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –¢–æ–∫–∏–æ —Ä–æ–¥–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –±–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å.",
        18: "18 —á–∏—Å–ª–∞ –∏—é–Ω—è 1998 –≥–æ–¥–∞: –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–µ—Ä–≤–∞—è –≤ –º–∏—Ä–µ –∫–ª–∏–Ω–∏–∫–∞ –ø–æ –æ—Ö—Ä–∞–Ω–µ –¥–∏–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.",
        19: "19 —á–∏—Å–ª–∞ –∏—é–ª—è 2004 –≥–æ–¥–∞: –≤ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–µ–ª—å—Ñ–∏–Ω–æ–≤.",
        20: "20 —á–∏—Å–ª–∞ –∞–≤–≥—É—Å—Ç–∞ 2013 –≥–æ–¥–∞: –≤ –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≤–∏–¥ –º–æ—Ä—Å–∫–∏—Ö —Å–≤–∏–Ω–æ–∫.",
        21: "21 —á–∏—Å–ª–∞ —Å–µ–Ω—Ç—è–±—Ä—è 1990 –≥–æ–¥–∞: –≤ –ë—Ä–∞–∑–∏–ª–∏–∏ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –æ—Ö—Ä–∞–Ω–µ —è–≥—É–∞—Ä–æ–≤.",
        22: "22 —á–∏—Å–ª–∞ –æ–∫—Ç—è–±—Ä—è 2016 –≥–æ–¥–∞: –≤ –ö–∏—Ç–∞–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ—Ä–æ–¥–∞ –æ–≤–µ—Ü.",
        23: "23 —á–∏—Å–ª–∞ –Ω–æ—è–±—Ä—è 2001 –≥–æ–¥–∞: –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –õ–æ–Ω–¥–æ–Ω–∞ —Ä–æ–¥–∏–ª—Å—è –ø–µ—Ä–≤—ã–π —á–µ—Ä–Ω—ã–π –∂–∏—Ä–∞—Ñ.",
        24: "24 —á–∏—Å–ª–∞ –¥–µ–∫–∞–±—Ä—è 2010 –≥–æ–¥–∞: –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –ù—å—é-–ô–æ—Ä–∫–∞ —Ä–æ–¥–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –±–µ–ª—ã–π –Ω–æ—Å–æ—Ä–æ–≥.",
        25: "25 —á–∏—Å–ª–∞ —è–Ω–≤–∞—Ä—è 2002 –≥–æ–¥–∞: –≤ –ö–∏—Ç–∞–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ—Ä–æ–¥–∞ —Ç–∏–≥—Ä–æ–≤.",
        26: "26 —á–∏—Å–ª–∞ —Ñ–µ–≤—Ä–∞–ª—è 2009 –≥–æ–¥–∞: –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤—ã–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –¥–µ–Ω—å –∑–∞—â–∏—Ç—ã –ø–∏–Ω–≥–≤–∏–Ω–æ–≤.",
        27: "27 —á–∏—Å–ª–∞ –º–∞—Ä—Ç–∞ 2015 –≥–æ–¥–∞: –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –¢–æ–∫–∏–æ —Ä–æ–¥–∏–ª–∞—Å—å –ø–µ—Ä–≤–∞—è –≤ –º–∏—Ä–µ –ø–∞–Ω–¥–∞ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ–º.",
        28: "28 —á–∏—Å–ª–∞ –∞–ø—Ä–µ–ª—è 1993 –≥–æ–¥–∞: –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ—Ä–æ–¥–∞ –∫—Ä–æ–∫–æ–¥–∏–ª–æ–≤.",
        29: "29 —á–∏—Å–ª–∞ –º–∞—è 2006 –≥–æ–¥–∞: –≤ –ù–æ–≤–æ–π –ó–µ–ª–∞–Ω–¥–∏–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –≤–∏–¥ –ø–∏–Ω–≥–≤–∏–Ω–æ–≤.",
        30: "30 —á–∏—Å–ª–∞ –∏—é–Ω—è 1994 –≥–æ–¥–∞: –≤ –º–∏—Ä–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ—Ä–æ–¥–∞ –ª–µ–º—É—Ä–æ–≤.",
        31: "31 —á–∏—Å–ª–∞ –∏—é–ª—è 2008 –≥–æ–¥–∞: –≤ –ë—Ä–∞–∑–∏–ª–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–µ—Ä–≤–∞—è –≤ –º–∏—Ä–µ —Ñ–µ—Ä–º–∞ –ø–æ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—é –º–æ—Ä—Å–∫–∏—Ö —Å–≤–∏–Ω–æ–∫."
    }
    return events.get(day, "–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_start_greeted = []
user_states = {}
user_sent_messages = defaultdict(list)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=['start'])
def button(message):
    if message.from_user.id not in user_start_greeted:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ñ–∞–∫—Ç –¥–Ω—è!')
        user_start_greeted.append(message.from_user.id)

    show_main_buttons(message.chat.id)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    chat_id = call.message.chat.id
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg_id in user_sent_messages[chat_id]:
        try:
            bot.delete_message(chat_id, msg_id)
        except telebot.apihelper.ApiTelegramException:
            pass
    user_sent_messages[chat_id].clear()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∞
    back_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back'))

    if call.data == 'question_1':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏:")
        bot.register_next_step_handler(msg, search_animal)
        user_sent_messages[chat_id].append(msg.message_id)
    elif call.data == 'question_2':
        user_states[chat_id] = 'waiting_for_dog_breed'
        dog_breeds = get_dog_breeds()
        msg = bot.send_message(chat_id, f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫:\n" + '\n'.join(dog_breeds) + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=back_markup)
        user_sent_messages[chat_id].append(msg.message_id)
    elif call.data == 'question_3':
        user_states[chat_id] = 'waiting_for_cat_breed'
        cat_breeds = get_cat_breeds()
        msg = bot.send_message(chat_id, f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫:\n" + '\n'.join(cat_breeds) + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=back_markup)
        user_sent_messages[chat_id].append(msg.message_id)
    elif call.data == 'question_4':
        fact_of_the_day = get_event_of_the_day()
        msg = bot.send_message(call.message.chat.id, fact_of_the_day, reply_markup=back_markup)
        user_sent_messages[chat_id].append(msg.message_id)
    elif call.data == 'question_5':
        environmental_text = get_environmental_text()
        msg = bot.send_message(call.message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞—Å–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö:\n{environmental_text}", reply_markup=back_markup)
        user_sent_messages[chat_id].append(msg.message_id)
    elif call.data == 'back':
        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥
        user_states.pop(chat_id, None)
        show_main_buttons(chat_id)

# –ü—Ä–∏–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ search_animal
def search_animal(message):
    animal_name = message.text
    animal_info = get_animal_paragraph_and_image(animal_name)

    paragraphs = [clean_text(paragraph) for paragraph in animal_info['info']]
    back_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back'))

    if animal_info['image_url']:
        caption = paragraphs[0][:1024]
        sent_message = bot.send_photo(message.chat.id, animal_info['image_url'], caption=caption)
        user_sent_messages[message.chat.id].append(sent_message.message_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        user_sent_messages[message.chat.id].append(msg.message_id)
        for paragraph in paragraphs[1:]:
            msg = bot.send_message(message.chat.id, paragraph)
            user_sent_messages[message.chat.id].append(msg.message_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é
        if animal_info['article_url']:
            msg = bot.send_message(message.chat.id, f"–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ: {animal_info['article_url']}")
            user_sent_messages[message.chat.id].append(msg.message_id)
    else:
        for paragraph in paragraphs:
            msg = bot.send_message(message.chat.id, paragraph)
            user_sent_messages[message.chat.id].append(msg.message_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é
        if animal_info['article_url']:
            msg = bot.send_message(message.chat.id, f"–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ: {animal_info['article_url']}")
            user_sent_messages[message.chat.id].append(msg.message_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    msg = bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=back_markup)
    user_sent_messages[message.chat.id].append(msg.message_id)

def show_main_buttons(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    item = types.InlineKeyboardButton('üîé–ø–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω–æ–≥–æüîé', callback_data='question_1')
    item2 = types.InlineKeyboardButton('üê∂–ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫üê∂', callback_data='question_2')
    item3 = types.InlineKeyboardButton('üê±–ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫üê±', callback_data='question_3')
    item4 = types.InlineKeyboardButton('üìÉ—Ñ–∞–∫—Ç –¥–Ω—èüìÉ', callback_data='question_4')
    item5 = types.InlineKeyboardButton('üèó—Å–ø–∞—Å–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Öüåç', callback_data='question_5')
    markup.add(item, item2, item3, item4, item5)
    msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    user_sent_messages[chat_id].append(msg.message_id)

def search_animal_by_breed(message, breed_name):
    animal_info = get_animal_paragraph_and_image(breed_name)

    paragraphs = [clean_text(paragraph) for paragraph in animal_info['info']]
    if animal_info['image_url']:
        bot.send_photo(message.chat.id, animal_info['image_url'], caption=paragraphs[0][:1024])
        for paragraph in paragraphs[1:]:
            bot.send_message(message.chat.id, paragraph)
    else:
        bot.send_message(message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–¥–µ: {breed_name}")
        for paragraph in paragraphs:
            bot.send_message(message.chat.id, paragraph)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é
    if animal_info['article_url']:
        bot.send_message(message.chat.id, f"–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ: {animal_info['article_url']}")


@bot.callback_query_handler(func=lambda call: call.data == 'question_2')
def handle_dog_breed_query(call):
    chat_id = call.message.chat.id
    user_states[chat_id] = 'waiting_for_dog_breed'
    dog_breeds = get_dog_breeds()
    back_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back'))

    msg = bot.send_message(chat_id, f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫:\n" + '\n'.join(dog_breeds), reply_markup=back_markup)
    user_sent_messages[chat_id] = [msg.message_id]

@bot.callback_query_handler(func=lambda call: call.data == 'question_3')
def handle_cat_breed_query(call):
    chat_id = call.message.chat.id
    user_states[chat_id] = 'waiting_for_cat_breed'
    cat_breeds = get_cat_breeds()
    back_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back'))

    msg = bot.send_message(chat_id, f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫:\n" + '\n'.join(cat_breeds), reply_markup=back_markup)
    user_sent_messages[chat_id] = [msg.message_id]

@bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id] == 'waiting_for_dog_breed')
def handle_dog_breed_selection(message):
    chat_id = message.chat.id
    dog_breeds = get_dog_breeds()
    try:
        number = int(message.text) - 1
        if 0 <= number < len(dog_breeds):
            breed_name = re.sub(r'^\d+\.\s*', '', dog_breeds[number])
            show_dog_breed_info(message, breed_name)
        else:
            bot.send_message(chat_id, "–ù–æ–º–µ—Ä –ø–æ—Ä–æ–¥—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä–æ–¥—ã.")

@bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id] == 'waiting_for_cat_breed')
def handle_cat_breed_selection(message):
    chat_id = message.chat.id
    cat_breeds = get_cat_breeds()
    try:
        number = int(message.text) - 1
        if 0 <= number < len(cat_breeds):
            breed_name = re.sub(r'^\d+\.\s*', '', cat_breeds[number])
            show_cat_breed_info(message, breed_name)
        else:
            bot.send_message(chat_id, "–ù–æ–º–µ—Ä –ø–æ—Ä–æ–¥—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä–æ–¥—ã.")

def show_dog_breed_info(message, breed_name):
    animal_info = get_animal_paragraph_and_image(breed_name)
    paragraphs = [clean_text(paragraph) for paragraph in animal_info['info']]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg_id in user_sent_messages[message.chat.id]:
        try:
            bot.delete_message(message.chat.id, msg_id)
        except telebot.apihelper.ApiTelegramException:
            pass

    if animal_info['image_url']:
        sent_photo_msg = bot.send_photo(message.chat.id, animal_info['image_url'], caption=paragraphs[0][:1024])
        user_sent_messages[message.chat.id].append(sent_photo_msg.message_id)
        for paragraph in paragraphs[1:]:
            msg = bot.send_message(message.chat.id, paragraph)
            user_sent_messages[message.chat.id].append(msg.message_id)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_to_breeds_markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back'))
    msg = bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=back_to_breeds_markup)
    user_sent_messages[message.chat.id].append(msg.message_id)

def show_cat_breed_info(message, breed_name):
    animal_info = get_animal_paragraph_and_image(breed_name)
    paragraphs = [clean_text(paragraph) for paragraph in animal_info['info']]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg_id in user_sent_messages[message.chat.id]:
        try:
            bot.delete_message(message.chat.id, msg_id)
        except telebot.apihelper.ApiTelegramException:
            pass

    if animal_info['image_url']:
        sent_photo_msg = bot.send_photo(message.chat.id, animal_info['image_url'], caption=paragraphs[0][:1024])
        user_sent_messages[message.chat.id].append(sent_photo_msg.message_id)
        for paragraph in paragraphs[1:]:
            msg = bot.send_message(message.chat.id, paragraph)
            user_sent_messages[message.chat.id].append(msg.message_id)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_to_breeds_markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back'))
    msg = bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=back_to_breeds_markup)
    user_sent_messages[message.chat.id].append(msg.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data == 'back')
def handle_back(call):
    chat_id = call.message.chat.id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ä–æ–¥–µ –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–º
    if call.message.reply_to_message:
        try:
            bot.delete_message(chat_id, call.message.reply_to_message.message_id)
        except telebot.apihelper.ApiTelegramException:
            pass

    # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    show_main_buttons(chat_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
